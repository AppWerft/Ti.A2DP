/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.a2dp;

import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import de.appwerft.a2dp.utils.KrollCallbacks;

@Kroll.module(parentModule = A2dpModule.class)
public class DiscoveryNearbyDevicesModule extends KrollModule {
	long startTime;
	List<BluetoothDevice> deviceList = new ArrayList<BluetoothDevice>();

	private final class DiscoveryResultHandler extends BroadcastReceiver {

		@Override
		public void onReceive(Context ctx, Intent intent) {
			String action = intent.getAction();
			switch (action) {
			case BluetoothDevice.ACTION_FOUND:
				try {
					BluetoothDevice device = intent
							.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
					if (callback != null) {
						KrollDict kd = new KrollDict();
						kd.put("device", new BluetoothDeviceProxy(device,
								false, true, false));
						callback.call("onload", kd);
					}
					deviceList.add(device);
					module.pairedDevices.addNearbyDevice(device);
					Log.d(LCAT, ">>>>>  A=" + device.getAddress()
							+ "         D="
							+ (System.currentTimeMillis() - startTime)
							+ "         N=" + device.getName());
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;
			case BluetoothAdapter.ACTION_DISCOVERY_STARTED:
				Log.d(LCAT, "––––––––––––––––––––––––––––––––––");
				startTime = System.currentTimeMillis();
				deviceList.clear();
				break;
			case BluetoothAdapter.ACTION_DISCOVERY_FINISHED:
				if (!btAdapter.isDiscovering()) {
					btAdapter.startDiscovery();
				}
				break;
			}
		}
	}

	final static String LCAT = A2dpModule.LCAT;
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	BluetoothAdapter btAdapter;
	KrollCallbacks callbacks;
	private static A2dpModule module;
	KrollCallbacks callback;

	// better would be an interface ;-)
	public static void setModule(A2dpModule _module) {
		module = _module;

	}

	private final BroadcastReceiver discoveryResult = new DiscoveryResultHandler();

	@Kroll.method
	public void start(@Kroll.argument(optional = true) KrollDict opts) {
		if (opts != null)
			callback = new KrollCallbacks(this, opts);
		btAdapter = BluetoothAdapter.getDefaultAdapter();
		if (btAdapter == null || !btAdapter.isEnabled()) {
			Log.e(LCAT, "btAdapter null or disabled");
			return;
		}
		IntentFilter filter = new IntentFilter();
		filter.addAction(BluetoothDevice.ACTION_FOUND);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		ctx.registerReceiver(discoveryResult, filter);
		if (!btAdapter.isDiscovering()) {
			btAdapter.startDiscovery();
		}
	}

	@Kroll.method
	public void stop() {
		tearDown();
	}

	@Override
	public void onPause(Activity activity) {
		tearDown();
		super.onPause(activity);
	}

	@Override
	public void onStop(Activity activity) {
		tearDown();
		super.onStop(activity);
	}

	private void tearDown() {
		btAdapter = BluetoothAdapter.getDefaultAdapter();
		if (discoveryResult != null) {
			try {
				ctx.unregisterReceiver(discoveryResult);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (btAdapter != null && btAdapter.isDiscovering())
			btAdapter.cancelDiscovery();
	}
}
