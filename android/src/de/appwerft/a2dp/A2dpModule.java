/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.a2dp;

import java.lang.reflect.Method;
import java.util.List;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;

import android.bluetooth.BluetoothA2dp;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.content.Context;

@Kroll.module(name = "A2dp", id = "de.appwerft.a2dp")
public class A2dpModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "A2DP";
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	BluetoothAdapter btAdapter;

	public A2dpModule() {
		super();
	}

	private BluetoothProfile.ServiceListener profileListener = new BluetoothProfile.ServiceListener() {
		BluetoothA2dp mBluetoothSpeaker;

		public void onServiceConnected(int profile, BluetoothProfile proxy) {
			if (profile == BluetoothProfile.A2DP) {
				// can be cast to a BluetoothA2dp instance
				mBluetoothSpeaker = (BluetoothA2dp) proxy;
				// Use reflection to acquire the connect(BluetoothDevice) method
				// on the proxy:
				try {
					Method connect = BluetoothA2dp.class.getDeclaredMethod(
							"connect", BluetoothDevice.class);
					Set<BluetoothDevice> devices = btAdapter.getBondedDevices();

				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				}

				// no devices are connected
				List<BluetoothDevice> connectedDevices = mBluetoothSpeaker
						.getConnectedDevices();

				// the one paired (and disconnected) speaker is returned here
				int[] statesToCheck = { BluetoothA2dp.STATE_DISCONNECTED };
				List<BluetoothDevice> disconnectedDevices = mBluetoothSpeaker
						.getDevicesMatchingConnectionStates(statesToCheck);

				BluetoothDevice btSpeaker = disconnectedDevices.get(0);

				// WHAT NOW?

			}
		}

		public void onServiceDisconnected(int profile) {
			if (profile == BluetoothProfile.A2DP) {
				mBluetoothSpeaker = null;
			}
		}
	};

	@Kroll.method
	protected void startScan() {
		// Get an instance of the BluetoothAdapter
		btAdapter = BluetoothAdapter.getDefaultAdapter();
		// Using this instance, get a profile proxy for A2DP
		btAdapter.getProfileProxy(ctx, profileListener, BluetoothProfile.A2DP);
	}
}
